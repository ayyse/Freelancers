import { IterableDiffers, OnChanges, TemplateRef, TrackByFunction, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
export type CompareFn<T = any> = (value: T, comparison: T) => boolean;
declare class AbpForContext {
    $implicit: any;
    index: number;
    count: number;
    list: any[];
    constructor($implicit: any, index: number, count: number, list: any[]);
}
export declare class ForDirective implements OnChanges {
    private tempRef;
    private vcRef;
    private differs;
    items: any[];
    orderBy?: string;
    orderDir?: 'ASC' | 'DESC';
    filterBy?: string;
    filterVal: any;
    trackBy?: TrackByFunction<any>;
    compareBy?: CompareFn;
    emptyRef?: TemplateRef<any>;
    private differ;
    private isShowEmptyRef;
    get compareFn(): CompareFn;
    get trackByFn(): TrackByFunction<any>;
    constructor(tempRef: TemplateRef<AbpForContext>, vcRef: ViewContainerRef, differs: IterableDiffers);
    private iterateOverAppliedOperations;
    private iterateOverAttachedViews;
    private projectItems;
    private sortItems;
    ngOnChanges(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ForDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ForDirective, "[abpFor]", never, { "items": { "alias": "abpForOf"; "required": false; }; "orderBy": { "alias": "abpForOrderBy"; "required": false; }; "orderDir": { "alias": "abpForOrderDir"; "required": false; }; "filterBy": { "alias": "abpForFilterBy"; "required": false; }; "filterVal": { "alias": "abpForFilterVal"; "required": false; }; "trackBy": { "alias": "abpForTrackBy"; "required": false; }; "compareBy": { "alias": "abpForCompareBy"; "required": false; }; "emptyRef": { "alias": "abpForEmptyRef"; "required": false; }; }, {}, never, never, true, never>;
}
export {};
