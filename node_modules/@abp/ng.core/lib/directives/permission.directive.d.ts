import { AfterViewInit, ChangeDetectorRef, OnChanges, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { ReplaySubject, Subscription } from 'rxjs';
import { PermissionService } from '../services/permission.service';
import { QueueManager } from '../utils/queue';
import * as i0 from "@angular/core";
export declare class PermissionDirective implements OnDestroy, OnChanges, AfterViewInit {
    private templateRef;
    private vcRef;
    private permissionService;
    private cdRef;
    queue: QueueManager;
    condition: string | undefined;
    runChangeDetection: boolean;
    subscription: Subscription;
    cdrSubject: ReplaySubject<void>;
    rendered: boolean;
    constructor(templateRef: TemplateRef<any>, vcRef: ViewContainerRef, permissionService: PermissionService, cdRef: ChangeDetectorRef, queue: QueueManager);
    private check;
    ngOnDestroy(): void;
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PermissionDirective, [{ optional: true; }, null, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PermissionDirective, "[abpPermission]", never, { "condition": { "alias": "abpPermission"; "required": false; }; "runChangeDetection": { "alias": "abpPermissionRunChangeDetection"; "required": false; }; }, {}, never, never, true, never>;
}
