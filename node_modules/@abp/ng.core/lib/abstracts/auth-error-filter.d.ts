import { AuthErrorEvent, AuthErrorFilter } from '../models';
export declare abstract class AbstractAuthErrorFilter<T, E> {
    abstract get(id: string): T;
    abstract add(filter: T): void;
    abstract patch(item: Partial<T>): void;
    abstract remove(id: string): void;
    abstract run(event: E): boolean;
}
export declare class AuthErrorFilterService<T = AuthErrorFilter, E = AuthErrorEvent> extends AbstractAuthErrorFilter<T, E> {
    private warningMessage;
    get(id: string): T;
    add(filter: T): void;
    patch(item: Partial<T>): void;
    remove(id: string): void;
    run(event: E): boolean;
}
