import { ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class AbstractNgModelComponent<T = any, U = T> implements ControlValueAccessor {
    protected _value: T;
    protected cdRef: ChangeDetectorRef;
    onChange?: (value: T) => void;
    onTouched?: () => void;
    disabled?: boolean;
    readonly?: boolean;
    valueFn: (value: U, previousValue?: T) => T;
    valueLimitFn: (value: T, previousValue?: T) => any;
    set value(value: T);
    get value(): T;
    get defaultValue(): T;
    notifyValueChange(): void;
    writeValue(value: T): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractNgModelComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AbstractNgModelComponent<any, any>, "ng-component", never, { "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "valueFn": { "alias": "valueFn"; "required": false; }; "valueLimitFn": { "alias": "valueLimitFn"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, never, false, never>;
}
