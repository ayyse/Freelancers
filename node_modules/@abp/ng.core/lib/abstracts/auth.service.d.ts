import { HttpHeaders } from '@angular/common/http';
import { Params } from '@angular/router';
import { Observable } from 'rxjs';
import { LoginParams } from '../models/auth';
import { AbpAuthResponse } from './auth-response.model';
import * as i0 from "@angular/core";
/**
 * Abstract service for Authentication.
 */
export declare class AuthService implements IAuthService {
    private warningMessage;
    get oidc(): boolean;
    set oidc(value: boolean);
    init(): Promise<any>;
    login(params: LoginParams): Observable<any>;
    logout(queryParams?: Params): Observable<any>;
    navigateToLogin(queryParams?: Params): void;
    get isInternalAuth(): boolean;
    get isAuthenticated(): boolean;
    loginUsingGrant(grantType: string, parameters: object, headers?: HttpHeaders): Promise<AbpAuthResponse>;
    getAccessTokenExpiration(): number;
    getRefreshToken(): string;
    getAccessToken(): string;
    refreshToken(): Promise<AbpAuthResponse>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthService>;
}
export interface IAuthService {
    oidc: boolean;
    get isInternalAuth(): boolean;
    get isAuthenticated(): boolean;
    init(): Promise<any>;
    logout(queryParams?: Params): Observable<any>;
    navigateToLogin(queryParams?: Params): void;
    login(params: LoginParams): Observable<any>;
    loginUsingGrant(grantType: string, parameters: object, headers?: HttpHeaders): Promise<AbpAuthResponse>;
    getAccessTokenExpiration(): number;
    getRefreshToken(): string;
    getAccessToken(): string;
    refreshToken(): Promise<AbpAuthResponse>;
}
