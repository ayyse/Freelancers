import { Type } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router, RouterEvent, Event } from '@angular/router';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare const NavigationEvent: {
    Cancel: typeof NavigationCancel;
    End: typeof NavigationEnd;
    Error: typeof NavigationError;
    Start: typeof NavigationStart;
};
export declare class RouterEvents {
    #private;
    protected readonly router: Router;
    previousNavigation: import("@angular/core").Signal<string>;
    currentNavigation: import("@angular/core").Signal<string>;
    constructor();
    protected listenToNavigation(): void;
    getEvents<T extends RouterEventConstructors>(...eventTypes: T): Observable<Event>;
    getNavigationEvents<T extends NavigationEventKeys>(...navigationEventKeys: T): Observable<T extends (infer Key)[] ? Key extends "Cancel" | "End" | "Error" | "Start" ? InstanceType<{
        Cancel: typeof NavigationCancel;
        End: typeof NavigationEnd;
        Error: typeof NavigationError;
        Start: typeof NavigationStart;
    }[Key]> : never : never>;
    getAllEvents(): Observable<Event>;
    getAllNavigationEvents(): Observable<NavigationStart | NavigationEnd | NavigationCancel | NavigationError>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RouterEvents, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RouterEvents>;
}
type RouterEventConstructors = [Type<RouterEvent>, ...Type<RouterEvent>[]];
type NavigationEventKeys = [NavigationEventKey, ...NavigationEventKey[]];
type NavigationEventType = typeof NavigationEvent;
export type NavigationEventKey = keyof NavigationEventType;
export {};
