import { Observable } from 'rxjs';
import { Environment } from '../models/environment';
import * as i0 from "@angular/core";
export declare class EnvironmentService {
    private readonly store;
    get createOnUpdateStream(): <Slice>(selector: (state: {
        [x: string]: any;
        apis?: {
            [x: string]: {
                [x: string]: string;
                url?: string;
                rootNamespace?: string;
            };
            default?: {
                [x: string]: string;
                url?: string;
                rootNamespace?: string;
            };
        };
        application?: {
            name?: string;
            baseUrl?: string;
            logoUrl?: string;
        };
        hmr?: boolean;
        test?: boolean;
        localization?: {
            defaultResourceName?: string;
        };
        oAuthConfig?: {
            clientId?: string;
            redirectUri?: string;
            postLogoutRedirectUri?: string;
            redirectUriAsPostLogoutRedirectUriFallback?: boolean;
            loginUrl?: string;
            scope?: string;
            resource?: string;
            rngUrl?: string;
            oidc?: boolean;
            requestAccessToken?: boolean;
            options?: any;
            issuer?: string;
            logoutUrl?: string;
            clearHashAfterLogin?: boolean;
            tokenEndpoint?: string;
            revocationEndpoint?: string;
            customTokenParameters?: string[];
            userinfoEndpoint?: string;
            responseType?: string;
            showDebugInformation?: boolean;
            silentRefreshRedirectUri?: string;
            silentRefreshMessagePrefix?: string;
            silentRefreshShowIFrame?: boolean;
            siletRefreshTimeout?: number;
            silentRefreshTimeout?: number;
            dummyClientSecret?: string;
            requireHttps?: boolean | "remoteOnly";
            strictDiscoveryDocumentValidation?: boolean;
            jwks?: object;
            customQueryParams?: object;
            silentRefreshIFrameName?: string;
            timeoutFactor?: number;
            sessionChecksEnabled?: boolean;
            sessionCheckIntervall?: number;
            sessionCheckIFrameUrl?: string;
            sessionCheckIFrameName?: string;
            disableAtHashCheck?: boolean;
            skipSubjectCheck?: boolean;
            useIdTokenHintForSilentRefresh?: boolean;
            skipIssuerCheck?: boolean;
            fallbackAccessTokenExpirationTimeInSec?: number;
            nonceStateSeparator?: string;
            useHttpBasicAuth?: boolean;
            clockSkewInSec?: number;
            decreaseExpirationBySec?: number;
            waitForTokenInMsec?: number;
            useSilentRefresh?: any;
            disablePKCE?: boolean;
            preserveRequestedRoute?: boolean;
            disableIdTokenTimer?: boolean;
            checkOrigin?: boolean;
            openUri?: (uri: string) => void;
            impersonation?: {
                tenantImpersonation?: boolean;
                userImpersonation?: boolean;
            };
        };
        production?: boolean;
        remoteEnv?: {
            url?: string;
            mergeStrategy?: "deepmerge" | "overwrite" | import("../models/environment").customMergeFn;
            method?: string;
            headers?: {
                [x: string]: string;
            };
        };
    }) => Slice, filterFn?: (x: Slice) => boolean) => Observable<Slice>;
    getEnvironment$(): Observable<Environment>;
    getEnvironment(): Environment;
    getApiUrl(key: string | undefined): string;
    getApiUrl$(key: string): Observable<string>;
    setState(environment: Environment): void;
    getIssuer(): string;
    getIssuer$(): Observable<string>;
    getImpersonation(): import("../models/environment").Impersonation;
    getImpersonation$(): Observable<import("../models/environment").Impersonation>;
    static ɵfac: i0.ɵɵFactoryDeclaration<EnvironmentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EnvironmentService>;
}
