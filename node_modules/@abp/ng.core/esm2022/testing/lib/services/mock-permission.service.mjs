import { ConfigStateService, PermissionService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class MockPermissionService extends PermissionService {
    constructor(configState) {
        super(configState);
        this.configState = configState;
        this.grantAllPolicies();
    }
    grantAllPolicies() {
        const grantedPolicies = new Proxy({}, {
            get() {
                return true;
            },
        });
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    grantPolicies(keys) {
        const grantedPolicies = keys.reduce((policies, key) => {
            policies[key] = true;
            return policies;
        }, {});
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: MockPermissionService, deps: [{ token: i1.ConfigStateService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: MockPermissionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: MockPermissionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.ConfigStateService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1wZXJtaXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3Rlc3Rpbmcvc3JjL2xpYi9zZXJ2aWNlcy9tb2NrLXBlcm1pc3Npb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSzNDLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxpQkFBaUI7SUFDMUQsWUFBc0IsV0FBK0I7UUFDbkQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBREMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBRW5ELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxNQUFNLGVBQWUsR0FBRyxJQUFJLEtBQUssQ0FDL0IsRUFBRSxFQUNGO1lBQ0UsR0FBRztnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7U0FDRixDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQWM7UUFDMUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNwRCxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBRSxFQUFnQyxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQzs4R0ExQlUscUJBQXFCO2tIQUFyQixxQkFBcUIsY0FGcEIsTUFBTTs7MkZBRVAscUJBQXFCO2tCQUhqQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSwgUGVybWlzc2lvblNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9ja1Blcm1pc3Npb25TZXJ2aWNlIGV4dGVuZHMgUGVybWlzc2lvblNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb25maWdTdGF0ZTogQ29uZmlnU3RhdGVTZXJ2aWNlKSB7XHJcbiAgICBzdXBlcihjb25maWdTdGF0ZSk7XHJcbiAgICB0aGlzLmdyYW50QWxsUG9saWNpZXMoKTtcclxuICB9XHJcblxyXG4gIGdyYW50QWxsUG9saWNpZXMoKSB7XHJcbiAgICBjb25zdCBncmFudGVkUG9saWNpZXMgPSBuZXcgUHJveHkoXHJcbiAgICAgIHt9LFxyXG4gICAgICB7XHJcbiAgICAgICAgZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5jb25maWdTdGF0ZVsnc3RvcmUnXS5kZWVwUGF0Y2goeyBhdXRoOiB7IGdyYW50ZWRQb2xpY2llcyB9IH0pO1xyXG4gIH1cclxuXHJcbiAgZ3JhbnRQb2xpY2llcyhrZXlzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgZ3JhbnRlZFBvbGljaWVzID0ga2V5cy5yZWR1Y2UoKHBvbGljaWVzLCBrZXkpID0+IHtcclxuICAgICAgcG9saWNpZXNba2V5XSA9IHRydWU7XHJcbiAgICAgIHJldHVybiBwb2xpY2llcztcclxuICAgIH0sIHt9IGFzIHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KTtcclxuXHJcbiAgICB0aGlzLmNvbmZpZ1N0YXRlWydzdG9yZSddLmRlZXBQYXRjaCh7IGF1dGg6IHsgZ3JhbnRlZFBvbGljaWVzIH0gfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==