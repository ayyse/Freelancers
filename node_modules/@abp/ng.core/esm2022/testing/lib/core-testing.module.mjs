import { BaseCoreModule, coreOptionsFactory, CORE_OPTIONS, LIST_QUERY_DEBOUNCE_TIME, LOADER_DELAY, PermissionService, RestService, INCUDE_LOCALIZATION_RESOURCES_TOKEN, OTHERS_GROUP, compareFuncFactory, SORT_COMPARE_FUNC, } from '@abp/ng.core';
import { APP_BASE_HREF } from '@angular/common';
import { NgModule } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { provideRoutes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { MockPermissionService } from './services/mock-permission.service';
import { MockRestService } from './services/mock-rest.service';
import { LocalizationPipe } from './pipes';
import * as i0 from "@angular/core";
/**
 * CoreTestingModule is the module that will be used in tests
 * and it provides mock alternatives
 */
export class CoreTestingModule {
    static withConfig({ baseHref = '/', listQueryDebounceTime = 0, routes = [], ...options } = {}) {
        return {
            ngModule: CoreTestingModule,
            providers: [
                { provide: APP_BASE_HREF, useValue: baseHref },
                {
                    provide: 'CORE_OPTIONS',
                    useValue: {
                        skipGetAppConfiguration: true,
                        ...options,
                    },
                },
                {
                    provide: CORE_OPTIONS,
                    useFactory: coreOptionsFactory,
                    deps: ['CORE_OPTIONS'],
                },
                {
                    provide: LIST_QUERY_DEBOUNCE_TIME,
                    useValue: listQueryDebounceTime,
                },
                {
                    provide: PermissionService,
                    useClass: MockPermissionService,
                },
                {
                    provide: RestService,
                    useClass: MockRestService,
                },
                {
                    provide: LOADER_DELAY,
                    useValue: 0,
                },
                {
                    provide: INCUDE_LOCALIZATION_RESOURCES_TOKEN,
                    useValue: false,
                },
                {
                    provide: OTHERS_GROUP,
                    useValue: 'AbpUi::OthersGroup',
                },
                {
                    provide: SORT_COMPARE_FUNC,
                    useFactory: compareFuncFactory,
                },
                provideRoutes(routes),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: CoreTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.5", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule, LocalizationPipe], exports: [RouterTestingModule, BaseCoreModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule, RouterTestingModule, BaseCoreModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: CoreTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [RouterTestingModule, BaseCoreModule],
                    imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule, LocalizationPipe],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS10ZXN0aW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvbGliL2NvcmUtdGVzdGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsWUFBWSxFQUNaLHdCQUF3QixFQUN4QixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCxtQ0FBbUMsRUFDbkMsWUFBWSxFQUNaLGtCQUFrQixFQUNsQixpQkFBaUIsR0FDbEIsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sU0FBUyxDQUFDOztBQUUzQzs7O0dBR0c7QUFLSCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLE1BQU0sQ0FBQyxVQUFVLENBQ2YsRUFBRSxRQUFRLEdBQUcsR0FBRyxFQUFFLHFCQUFxQixHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxLQUFLLEVBQWM7UUFFdkYsT0FBTztZQUNMLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFO2dCQUM5QztvQkFDRSxPQUFPLEVBQUUsY0FBYztvQkFDdkIsUUFBUSxFQUFFO3dCQUNSLHVCQUF1QixFQUFFLElBQUk7d0JBQzdCLEdBQUcsT0FBTztxQkFDWDtpQkFDRjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsVUFBVSxFQUFFLGtCQUFrQjtvQkFDOUIsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDO2lCQUN2QjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxRQUFRLEVBQUUscUJBQXFCO2lCQUNoQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixRQUFRLEVBQUUscUJBQXFCO2lCQUNoQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsV0FBVztvQkFDcEIsUUFBUSxFQUFFLGVBQWU7aUJBQzFCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxZQUFZO29CQUNyQixRQUFRLEVBQUUsQ0FBQztpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsbUNBQW1DO29CQUM1QyxRQUFRLEVBQUUsS0FBSztpQkFDaEI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFlBQVk7b0JBQ3JCLFFBQVEsRUFBRSxvQkFBb0I7aUJBQy9CO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFVBQVUsRUFBRSxrQkFBa0I7aUJBQy9CO2dCQUNELGFBQWEsQ0FBQyxNQUFNLENBQUM7YUFDdEI7U0FDRixDQUFDO0lBQ0osQ0FBQzs4R0FuRFUsaUJBQWlCOytHQUFqQixpQkFBaUIsWUFGbEIsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixhQUQzRSxtQkFBbUIsRUFBRSxjQUFjOytHQUdsQyxpQkFBaUIsWUFGbEIsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUR6RCxtQkFBbUIsRUFBRSxjQUFjOzsyRkFHbEMsaUJBQWlCO2tCQUo3QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLGNBQWMsQ0FBQztvQkFDOUMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixDQUFDO2lCQUN2RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQUJQLFxyXG4gIEJhc2VDb3JlTW9kdWxlLFxyXG4gIGNvcmVPcHRpb25zRmFjdG9yeSxcclxuICBDT1JFX09QVElPTlMsXHJcbiAgTElTVF9RVUVSWV9ERUJPVU5DRV9USU1FLFxyXG4gIExPQURFUl9ERUxBWSxcclxuICBQZXJtaXNzaW9uU2VydmljZSxcclxuICBSZXN0U2VydmljZSxcclxuICBJTkNVREVfTE9DQUxJWkFUSU9OX1JFU09VUkNFU19UT0tFTixcclxuICBPVEhFUlNfR1JPVVAsXHJcbiAgY29tcGFyZUZ1bmNGYWN0b3J5LFxyXG4gIFNPUlRfQ09NUEFSRV9GVU5DLFxyXG59IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IEFQUF9CQVNFX0hSRUYgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOb29wQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IHByb3ZpZGVSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBSb3V0ZXJUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBNb2NrUGVybWlzc2lvblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL21vY2stcGVybWlzc2lvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTW9ja1Jlc3RTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9tb2NrLXJlc3Quc2VydmljZSc7XHJcbmltcG9ydCB7IExvY2FsaXphdGlvblBpcGUgfSBmcm9tICcuL3BpcGVzJztcclxuXHJcbi8qKlxyXG4gKiBDb3JlVGVzdGluZ01vZHVsZSBpcyB0aGUgbW9kdWxlIHRoYXQgd2lsbCBiZSB1c2VkIGluIHRlc3RzXHJcbiAqIGFuZCBpdCBwcm92aWRlcyBtb2NrIGFsdGVybmF0aXZlc1xyXG4gKi9cclxuQE5nTW9kdWxlKHtcclxuICBleHBvcnRzOiBbUm91dGVyVGVzdGluZ01vZHVsZSwgQmFzZUNvcmVNb2R1bGVdLFxyXG4gIGltcG9ydHM6IFtOb29wQW5pbWF0aW9uc01vZHVsZSwgUm91dGVyVGVzdGluZ01vZHVsZSwgQmFzZUNvcmVNb2R1bGUsIExvY2FsaXphdGlvblBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29yZVRlc3RpbmdNb2R1bGUge1xyXG4gIHN0YXRpYyB3aXRoQ29uZmlnKFxyXG4gICAgeyBiYXNlSHJlZiA9ICcvJywgbGlzdFF1ZXJ5RGVib3VuY2VUaW1lID0gMCwgcm91dGVzID0gW10sIC4uLm9wdGlvbnMgfSA9IHt9IGFzIEFCUC5UZXN0LFxyXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Q29yZVRlc3RpbmdNb2R1bGU+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBDb3JlVGVzdGluZ01vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBBUFBfQkFTRV9IUkVGLCB1c2VWYWx1ZTogYmFzZUhyZWYgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiAnQ09SRV9PUFRJT05TJyxcclxuICAgICAgICAgIHVzZVZhbHVlOiB7XHJcbiAgICAgICAgICAgIHNraXBHZXRBcHBDb25maWd1cmF0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IENPUkVfT1BUSU9OUyxcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGNvcmVPcHRpb25zRmFjdG9yeSxcclxuICAgICAgICAgIGRlcHM6IFsnQ09SRV9PUFRJT05TJ10sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBMSVNUX1FVRVJZX0RFQk9VTkNFX1RJTUUsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogbGlzdFF1ZXJ5RGVib3VuY2VUaW1lLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogUGVybWlzc2lvblNlcnZpY2UsXHJcbiAgICAgICAgICB1c2VDbGFzczogTW9ja1Blcm1pc3Npb25TZXJ2aWNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogUmVzdFNlcnZpY2UsXHJcbiAgICAgICAgICB1c2VDbGFzczogTW9ja1Jlc3RTZXJ2aWNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogTE9BREVSX0RFTEFZLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBJTkNVREVfTE9DQUxJWkFUSU9OX1JFU09VUkNFU19UT0tFTixcclxuICAgICAgICAgIHVzZVZhbHVlOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IE9USEVSU19HUk9VUCxcclxuICAgICAgICAgIHVzZVZhbHVlOiAnQWJwVWk6Ok90aGVyc0dyb3VwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFNPUlRfQ09NUEFSRV9GVU5DLFxyXG4gICAgICAgICAgdXNlRmFjdG9yeTogY29tcGFyZUZ1bmNGYWN0b3J5LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvdmlkZVJvdXRlcyhyb3V0ZXMpLFxyXG4gICAgICBdLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19