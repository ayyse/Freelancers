import { Injectable, Injector } from '@angular/core';
import { EMPTY, BehaviorSubject, ReplaySubject, Subject, } from 'rxjs';
import { catchError, debounceTime, filter, finalize, shareReplay, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { LIST_QUERY_DEBOUNCE_TIME } from '../tokens/list.token';
import * as i0 from "@angular/core";
export class ListService {
    set filter(value) {
        this._filter = value;
        this.get();
    }
    get filter() {
        return this._filter;
    }
    set maxResultCount(value) {
        this._maxResultCount = value;
        this.get();
    }
    get maxResultCount() {
        return this._maxResultCount;
    }
    set page(value) {
        if (value === this._page)
            return;
        this._page = value;
        this.get();
    }
    get page() {
        return this._page;
    }
    set totalCount(value) {
        if (value === this._totalCount)
            return;
        this._totalCount = value;
        this.get();
    }
    get totalCount() {
        return this._totalCount;
    }
    set sortKey(value) {
        this._sortKey = value;
        this.get();
    }
    get sortKey() {
        return this._sortKey;
    }
    set sortOrder(value) {
        this._sortOrder = value;
        this.get();
    }
    get sortOrder() {
        return this._sortOrder;
    }
    get query$() {
        return this._query$
            .asObservable()
            .pipe(this.delay, shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * @deprecated Use `requestStatus$` instead.
     */
    get isLoading$() {
        return this._isLoading$.asObservable().pipe(takeUntil(this.destroy$));
    }
    get requestStatus$() {
        return this._requestStatus.asObservable().pipe(takeUntil(this.destroy$));
    }
    constructor(injector) {
        this._filter = '';
        this._maxResultCount = 10;
        this._page = 0;
        this._totalCount = 0;
        this._sortKey = '';
        this._sortOrder = '';
        this._query$ = new ReplaySubject(1);
        this._isLoading$ = new BehaviorSubject(false);
        this._requestStatus = new BehaviorSubject('idle');
        this.destroy$ = new Subject();
        this.get = () => {
            this.resetPageWhenUnchanged();
            this.next();
        };
        this.getWithoutPageReset = () => {
            this.next();
        };
        const delay = injector.get(LIST_QUERY_DEBOUNCE_TIME, 300);
        this.delay = delay ? debounceTime(delay) : tap();
        this.get();
    }
    hookToQuery(streamCreatorCallback) {
        return this.query$.pipe(tap(() => this._isLoading$.next(true)), tap(() => this._requestStatus.next('loading')), switchMap(query => streamCreatorCallback(query).pipe(catchError(() => {
            this._requestStatus.next('error');
            return EMPTY;
        }), tap(() => this._requestStatus.next('success')), finalize(() => {
            this._isLoading$.next(false);
            this._requestStatus.next('idle');
        }))), filter(Boolean), shareReplay({ bufferSize: 1, refCount: true }), takeUntil(this.destroy$));
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    resetPageWhenUnchanged() {
        const maxPage = Number(Number(this.totalCount / this._maxResultCount).toFixed());
        const skipCount = this._page * this._maxResultCount;
        if (skipCount !== this._totalCount) {
            return;
        }
        if (this.page === maxPage && this.page > 0) {
            this.page = this.page - 1;
        }
    }
    next() {
        this._query$.next({
            filter: this._filter || undefined,
            maxResultCount: this._maxResultCount,
            skipCount: this._page * this._maxResultCount,
            sorting: this._sortOrder ? `${this._sortKey} ${this._sortOrder}` : undefined,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ListService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ListService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ListService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,