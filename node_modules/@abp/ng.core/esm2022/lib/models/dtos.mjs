import { checkHasProp } from '../utils/common-utils';
export class ListResultDto {
    constructor(initialValues = {}) {
        for (const key in initialValues) {
            if (checkHasProp(initialValues, key)) {
                this[key] = initialValues[key];
            }
        }
    }
}
export class PagedResultDto extends ListResultDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleObject {
    constructor(initialValues = {}) {
        for (const key in initialValues) {
            if (checkHasProp(initialValues, key) && initialValues[key] !== undefined) {
                this[key] = initialValues[key];
            }
        }
    }
}
export class ExtensibleEntityDto extends ExtensibleObject {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class LimitedResultRequestDto {
    constructor(initialValues = {}) {
        this.maxResultCount = 10;
        for (const key in initialValues) {
            if (checkHasProp(initialValues, key) && initialValues[key] !== undefined) {
                this[key] = initialValues[key];
            }
        }
    }
}
export class ExtensibleLimitedResultRequestDto extends ExtensibleEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
        this.maxResultCount = 10;
    }
}
export class PagedResultRequestDto extends LimitedResultRequestDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensiblePagedResultRequestDto extends ExtensibleLimitedResultRequestDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class PagedAndSortedResultRequestDto extends PagedResultRequestDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensiblePagedAndSortedResultRequestDto extends ExtensiblePagedResultRequestDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class EntityDto {
    constructor(initialValues = {}) {
        for (const key in initialValues) {
            if (checkHasProp(initialValues, key)) {
                this[key] = initialValues[key];
            }
        }
    }
}
export class CreationAuditedEntityDto extends EntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class CreationAuditedEntityWithUserDto extends CreationAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class AuditedEntityDto extends CreationAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
/** @deprecated the class signature will change in v8.0 */
export class AuditedEntityWithUserDto extends AuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class FullAuditedEntityDto extends AuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
/** @deprecated the class signature will change in v8.0 */
export class FullAuditedEntityWithUserDto extends FullAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleCreationAuditedEntityDto extends ExtensibleEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleAuditedEntityDto extends ExtensibleCreationAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleAuditedEntityWithUserDto extends ExtensibleAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleCreationAuditedEntityWithUserDto extends ExtensibleCreationAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleFullAuditedEntityDto extends ExtensibleAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
export class ExtensibleFullAuditedEntityWithUserDto extends ExtensibleFullAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
//# sourceMappingURL=data:application/json;base64,