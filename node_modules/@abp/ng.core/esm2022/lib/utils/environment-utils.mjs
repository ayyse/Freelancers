import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { EnvironmentService } from '../services/environment.service';
import { HttpErrorReporterService } from '../services/http-error-reporter.service';
import { deepMerge } from './object-utils';
export function getRemoteEnv(injector, environment) {
    const environmentService = injector.get(EnvironmentService);
    const { remoteEnv } = environment;
    const { headers = {}, method = 'GET', url } = remoteEnv || {};
    if (!url)
        return Promise.resolve();
    const http = injector.get(HttpClient);
    const httpErrorReporter = injector.get(HttpErrorReporterService);
    return http
        .request(method, url, { headers })
        .pipe(catchError(err => {
        httpErrorReporter.reportError(err);
        return of(null);
    }), // TODO: Consider get handle function from a provider
    tap(env => environmentService.setState(mergeEnvironments(environment, env || {}, remoteEnv))))
        .toPromise();
}
function mergeEnvironments(local, remote, config) {
    switch (config.mergeStrategy) {
        case 'deepmerge':
            return deepMerge(local, remote);
        case 'overwrite':
        case null:
        case undefined:
            return remote;
        default:
            return config.mergeStrategy(local, remote);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdXRpbHMvZW52aXJvbm1lbnQtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsTUFBTSxVQUFVLFlBQVksQ0FBQyxRQUFrQixFQUFFLFdBQWlDO0lBQ2hGLE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRTVELE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxXQUFXLENBQUM7SUFDbEMsTUFBTSxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxTQUFTLElBQUssRUFBZ0IsQ0FBQztJQUM3RSxJQUFJLENBQUMsR0FBRztRQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRW5DLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEMsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFakUsT0FBTyxJQUFJO1NBQ1IsT0FBTyxDQUFjLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUM5QyxJQUFJLENBQ0gsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxFQUFFLHFEQUFxRDtJQUN6RCxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDUixrQkFBa0IsQ0FBQyxRQUFRLENBQ3pCLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUssRUFBa0IsRUFBRSxTQUFzQixDQUFDLENBQ25GLENBQ0YsQ0FDRjtTQUNBLFNBQVMsRUFBRSxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixLQUEyQixFQUMzQixNQUFtQixFQUNuQixNQUFpQjtJQUVqQixRQUFRLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM3QixLQUFLLFdBQVc7WUFDZCxPQUFPLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFnQixDQUFDO1FBQ2pELEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxTQUFTO1lBQ1osT0FBTyxNQUFNLENBQUM7UUFDaEI7WUFDRSxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBFbnZpcm9ubWVudCwgUmVtb3RlRW52IH0gZnJvbSAnLi4vbW9kZWxzL2Vudmlyb25tZW50JztcclxuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZW52aXJvbm1lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IEh0dHBFcnJvclJlcG9ydGVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2h0dHAtZXJyb3ItcmVwb3J0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJy4vb2JqZWN0LXV0aWxzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZW1vdGVFbnYoaW5qZWN0b3I6IEluamVjdG9yLCBlbnZpcm9ubWVudDogUGFydGlhbDxFbnZpcm9ubWVudD4pIHtcclxuICBjb25zdCBlbnZpcm9ubWVudFNlcnZpY2UgPSBpbmplY3Rvci5nZXQoRW52aXJvbm1lbnRTZXJ2aWNlKTtcclxuXHJcbiAgY29uc3QgeyByZW1vdGVFbnYgfSA9IGVudmlyb25tZW50O1xyXG4gIGNvbnN0IHsgaGVhZGVycyA9IHt9LCBtZXRob2QgPSAnR0VUJywgdXJsIH0gPSByZW1vdGVFbnYgfHwgKHt9IGFzIFJlbW90ZUVudik7XHJcbiAgaWYgKCF1cmwpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuXHJcbiAgY29uc3QgaHR0cCA9IGluamVjdG9yLmdldChIdHRwQ2xpZW50KTtcclxuICBjb25zdCBodHRwRXJyb3JSZXBvcnRlciA9IGluamVjdG9yLmdldChIdHRwRXJyb3JSZXBvcnRlclNlcnZpY2UpO1xyXG5cclxuICByZXR1cm4gaHR0cFxyXG4gICAgLnJlcXVlc3Q8RW52aXJvbm1lbnQ+KG1ldGhvZCwgdXJsLCB7IGhlYWRlcnMgfSlcclxuICAgIC5waXBlKFxyXG4gICAgICBjYXRjaEVycm9yKGVyciA9PiB7XHJcbiAgICAgICAgaHR0cEVycm9yUmVwb3J0ZXIucmVwb3J0RXJyb3IoZXJyKTtcclxuICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgIH0pLCAvLyBUT0RPOiBDb25zaWRlciBnZXQgaGFuZGxlIGZ1bmN0aW9uIGZyb20gYSBwcm92aWRlclxyXG4gICAgICB0YXAoZW52ID0+XHJcbiAgICAgICAgZW52aXJvbm1lbnRTZXJ2aWNlLnNldFN0YXRlKFxyXG4gICAgICAgICAgbWVyZ2VFbnZpcm9ubWVudHMoZW52aXJvbm1lbnQsIGVudiB8fCAoe30gYXMgRW52aXJvbm1lbnQpLCByZW1vdGVFbnYgYXMgUmVtb3RlRW52KSxcclxuICAgICAgICApLFxyXG4gICAgICApLFxyXG4gICAgKVxyXG4gICAgLnRvUHJvbWlzZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtZXJnZUVudmlyb25tZW50cyhcclxuICBsb2NhbDogUGFydGlhbDxFbnZpcm9ubWVudD4sXHJcbiAgcmVtb3RlOiBFbnZpcm9ubWVudCxcclxuICBjb25maWc6IFJlbW90ZUVudixcclxuKTogRW52aXJvbm1lbnQge1xyXG4gIHN3aXRjaCAoY29uZmlnLm1lcmdlU3RyYXRlZ3kpIHtcclxuICAgIGNhc2UgJ2RlZXBtZXJnZSc6XHJcbiAgICAgIHJldHVybiBkZWVwTWVyZ2UobG9jYWwsIHJlbW90ZSkgYXMgRW52aXJvbm1lbnQ7XHJcbiAgICBjYXNlICdvdmVyd3JpdGUnOlxyXG4gICAgY2FzZSBudWxsOlxyXG4gICAgY2FzZSB1bmRlZmluZWQ6XHJcbiAgICAgIHJldHVybiByZW1vdGU7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gY29uZmlnLm1lcmdlU3RyYXRlZ3kobG9jYWwsIHJlbW90ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==