import { InjectionToken, inject } from '@angular/core';
import { LocalizationService } from '../services';
export const SORT_COMPARE_FUNC = new InjectionToken('SORT_COMPARE_FUNC');
export function compareFuncFactory() {
    const localizationService = inject(LocalizationService);
    const fn = (a, b) => {
        const aNumber = a.order;
        const bNumber = b.order;
        if (aNumber > bNumber)
            return 1;
        if (aNumber < bNumber)
            return -1;
        if (a.id > b.id)
            return 1;
        if (a.id < b.id)
            return -1;
        if (!Number.isInteger(aNumber))
            return 1;
        if (!Number.isInteger(bNumber))
            return -1;
        const aName = localizationService.instant(a.name);
        const bName = localizationService.instant(b.name);
        if (aName > bName)
            return 1;
        if (aName < bName)
            return -1;
        return 0;
    };
    return fn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZS1mdW5jLnRva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3Rva2Vucy9jb21wYXJlLWZ1bmMudG9rZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUNqRCxtQkFBbUIsQ0FDcEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN4RCxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQWUsRUFBRSxDQUFlLEVBQUUsRUFBRTtRQUM5QyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3hCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFeEIsSUFBSSxPQUFPLEdBQUcsT0FBTztZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLElBQUksT0FBTyxHQUFHLE9BQU87WUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUxQyxNQUFNLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELE1BQU0sS0FBSyxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEQsSUFBSSxLQUFLLEdBQUcsS0FBSztZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLElBQUksS0FBSyxHQUFHLEtBQUs7WUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTdCLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDO0lBRUYsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgdHlwZSB7IFNvcnRhYmxlSXRlbSB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgU09SVF9DT01QQVJFX0ZVTkMgPSBuZXcgSW5qZWN0aW9uVG9rZW48KGE6IFNvcnRhYmxlSXRlbSwgYjogU29ydGFibGVJdGVtKSA9PiBudW1iZXI+KFxyXG4gICdTT1JUX0NPTVBBUkVfRlVOQycsXHJcbik7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZUZ1bmNGYWN0b3J5KCkge1xyXG4gIGNvbnN0IGxvY2FsaXphdGlvblNlcnZpY2UgPSBpbmplY3QoTG9jYWxpemF0aW9uU2VydmljZSk7XHJcbiAgY29uc3QgZm4gPSAoYTogU29ydGFibGVJdGVtLCBiOiBTb3J0YWJsZUl0ZW0pID0+IHtcclxuICAgIGNvbnN0IGFOdW1iZXIgPSBhLm9yZGVyO1xyXG4gICAgY29uc3QgYk51bWJlciA9IGIub3JkZXI7XHJcblxyXG4gICAgaWYgKGFOdW1iZXIgPiBiTnVtYmVyKSByZXR1cm4gMTtcclxuICAgIGlmIChhTnVtYmVyIDwgYk51bWJlcikgcmV0dXJuIC0xO1xyXG5cclxuICAgIGlmIChhLmlkID4gYi5pZCkgcmV0dXJuIDE7XHJcbiAgICBpZiAoYS5pZCA8IGIuaWQpIHJldHVybiAtMTtcclxuXHJcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYU51bWJlcikpIHJldHVybiAxO1xyXG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGJOdW1iZXIpKSByZXR1cm4gLTE7XHJcblxyXG4gICAgY29uc3QgYU5hbWUgPSBsb2NhbGl6YXRpb25TZXJ2aWNlLmluc3RhbnQoYS5uYW1lKTtcclxuICAgIGNvbnN0IGJOYW1lID0gbG9jYWxpemF0aW9uU2VydmljZS5pbnN0YW50KGIubmFtZSk7XHJcblxyXG4gICAgaWYgKGFOYW1lID4gYk5hbWUpIHJldHVybiAxO1xyXG4gICAgaWYgKGFOYW1lIDwgYk5hbWUpIHJldHVybiAtMTtcclxuXHJcbiAgICByZXR1cm4gMDtcclxuICB9O1xyXG5cclxuICByZXR1cm4gZm47XHJcbn1cclxuIl19