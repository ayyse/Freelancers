import { Directive, Injector, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import compare from 'just-compare';
import { filter } from 'rxjs/operators';
import { ReplaceableComponentsService } from '../services/replaceable-components.service';
import { SubscriptionService } from '../services/subscription.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/replaceable-components.service";
import * as i2 from "../services/subscription.service";
export class ReplaceableTemplateDirective {
    constructor(injector, templateRef, vcRef, replaceableComponents, subscription) {
        this.injector = injector;
        this.templateRef = templateRef;
        this.vcRef = vcRef;
        this.replaceableComponents = replaceableComponents;
        this.subscription = subscription;
        this.providedData = {
            inputs: {},
            outputs: {},
        };
        this.context = {};
        this.defaultComponentSubscriptions = {};
        this.initialized = false;
        this.context = {
            initTemplate: (ref) => {
                this.resetDefaultComponent();
                this.defaultComponentRef = ref;
                this.setDefaultComponentInputs();
            },
        };
    }
    ngOnInit() {
        const component$ = this.replaceableComponents
            .get$(this.data.componentKey)
            .pipe(filter((res = {}) => !this.initialized || !compare(res.component, this.externalComponent)));
        this.subscription.addOne(component$, (res = {}) => {
            this.vcRef.clear();
            this.externalComponent = res.component;
            if (this.defaultComponentRef) {
                this.resetDefaultComponent();
            }
            if (res.component) {
                this.setProvidedData();
                const customInjector = Injector.create({
                    providers: [{ provide: 'REPLACEABLE_DATA', useValue: this.providedData }],
                    parent: this.injector,
                });
                const ref = this.vcRef.createComponent(res.component, {
                    index: 0,
                    injector: customInjector,
                });
            }
            else {
                this.vcRef.createEmbeddedView(this.templateRef, this.context);
            }
            this.initialized = true;
        });
    }
    ngOnChanges(changes) {
        if (changes?.data?.currentValue?.inputs && this.defaultComponentRef) {
            this.setDefaultComponentInputs();
        }
    }
    setDefaultComponentInputs() {
        if (!this.defaultComponentRef || (!this.data.inputs && !this.data.outputs))
            return;
        if (this.data.inputs) {
            for (const key in this.data.inputs) {
                if (Object.prototype.hasOwnProperty.call(this.data.inputs, key)) {
                    if (!compare(this.defaultComponentRef[key], this.data.inputs[key].value)) {
                        this.defaultComponentRef[key] = this.data.inputs[key].value;
                    }
                }
            }
        }
        if (this.data.outputs) {
            for (const key in this.data.outputs) {
                if (Object.prototype.hasOwnProperty.call(this.data.outputs, key)) {
                    if (!this.defaultComponentSubscriptions[key]) {
                        this.defaultComponentSubscriptions[key] = this.defaultComponentRef[key].subscribe((value) => {
                            this.data.outputs?.[key](value);
                        });
                    }
                }
            }
        }
    }
    setProvidedData() {
        this.providedData = { outputs: {}, ...this.data, inputs: {} };
        if (!this.data.inputs)
            return;
        Object.defineProperties(this.providedData.inputs, {
            ...Object.keys(this.data.inputs).reduce((acc, key) => ({
                ...acc,
                [key]: {
                    enumerable: true,
                    configurable: true,
                    get: () => this.data.inputs?.[key]?.value,
                    ...(this.data.inputs?.[key]?.twoWay && {
                        set: (newValue) => {
                            if (this.data.inputs?.[key]) {
                                this.data.inputs[key].value = newValue;
                            }
                            if (this.data.outputs?.[`${key}Change`]) {
                                this.data.outputs[`${key}Change`](newValue);
                            }
                        },
                    }),
                },
            }), {}),
        });
    }
    resetDefaultComponent() {
        Object.keys(this.defaultComponentSubscriptions).forEach(key => {
            this.defaultComponentSubscriptions[key].unsubscribe();
        });
        this.defaultComponentSubscriptions = {};
        this.defaultComponentRef = null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ReplaceableTemplateDirective, deps: [{ token: i0.Injector }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.ReplaceableComponentsService }, { token: i2.SubscriptionService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.5", type: ReplaceableTemplateDirective, isStandalone: true, selector: "[abpReplaceableTemplate]", inputs: { data: ["abpReplaceableTemplate", "data"] }, providers: [SubscriptionService], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ReplaceableTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[abpReplaceableTemplate]',
                    providers: [SubscriptionService],
                }]
        }], ctorParameters: () => [{ type: i0.Injector }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.ReplaceableComponentsService }, { type: i2.SubscriptionService }], propDecorators: { data: [{
                type: Input,
                args: ['abpReplaceableTemplate']
            }] } });
//# sourceMappingURL=data:application/json;base64,