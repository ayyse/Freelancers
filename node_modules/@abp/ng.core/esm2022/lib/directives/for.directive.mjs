import { Directive, Input, IterableDiffers, TemplateRef, ViewContainerRef, } from '@angular/core';
import clone from 'just-clone';
import compare from 'just-compare';
import * as i0 from "@angular/core";
class AbpForContext {
    constructor($implicit, index, count, list) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
        this.list = list;
    }
}
class RecordView {
    constructor(record, view) {
        this.record = record;
        this.view = view;
    }
}
export class ForDirective {
    get compareFn() {
        return this.compareBy || compare;
    }
    get trackByFn() {
        return this.trackBy || ((index, item) => item.id || index);
    }
    constructor(tempRef, vcRef, differs) {
        this.tempRef = tempRef;
        this.vcRef = vcRef;
        this.differs = differs;
    }
    iterateOverAppliedOperations(changes) {
        const rw = [];
        changes.forEachOperation((record, previousIndex, currentIndex) => {
            if (record.previousIndex == null) {
                const view = this.vcRef.createEmbeddedView(this.tempRef, new AbpForContext(null, -1, -1, this.items), currentIndex || 0);
                rw.push(new RecordView(record, view));
            }
            else if (currentIndex == null && previousIndex !== null) {
                this.vcRef.remove(previousIndex);
            }
            else {
                if (previousIndex !== null) {
                    const view = this.vcRef.get(previousIndex);
                    if (view && currentIndex !== null) {
                        this.vcRef.move(view, currentIndex);
                        rw.push(new RecordView(record, view));
                    }
                }
            }
        });
        for (let i = 0, l = rw.length; i < l; i++) {
            rw[i].view.context.$implicit = rw[i].record.item;
        }
    }
    iterateOverAttachedViews(changes) {
        for (let i = 0, l = this.vcRef.length; i < l; i++) {
            const viewRef = this.vcRef.get(i);
            viewRef.context.index = i;
            viewRef.context.count = l;
            viewRef.context.list = this.items;
        }
        changes.forEachIdentityChange((record) => {
            if (record.currentIndex !== null) {
                const viewRef = this.vcRef.get(record.currentIndex);
                viewRef.context.$implicit = record.item;
            }
        });
    }
    projectItems(items) {
        if (!items.length && this.emptyRef) {
            this.vcRef.clear();
            this.vcRef.createEmbeddedView(this.emptyRef).rootNodes;
            this.isShowEmptyRef = true;
            this.differ = null;
            return;
        }
        if (this.emptyRef && this.isShowEmptyRef) {
            this.vcRef.clear();
            this.isShowEmptyRef = false;
        }
        if (!this.differ && items) {
            this.differ = this.differs.find(items).create(this.trackByFn);
        }
        if (this.differ) {
            const changes = this.differ.diff(items);
            if (changes) {
                this.iterateOverAppliedOperations(changes);
                this.iterateOverAttachedViews(changes);
            }
        }
    }
    sortItems(items) {
        const orderBy = this.orderBy;
        if (orderBy) {
            items.sort((a, b) => (a[orderBy] > b[orderBy] ? 1 : a[orderBy] < b[orderBy] ? -1 : 0));
        }
        else {
            items.sort();
        }
    }
    ngOnChanges() {
        let items = clone(this.items);
        if (!Array.isArray(items))
            return;
        const compareFn = this.compareFn;
        const filterBy = this.filterBy;
        if (typeof filterBy !== 'undefined' &&
            typeof this.filterVal !== 'undefined' &&
            this.filterVal !== '') {
            items = items.filter(item => compareFn(item[filterBy], this.filterVal));
        }
        switch (this.orderDir) {
            case 'ASC':
                this.sortItems(items);
                this.projectItems(items);
                break;
            case 'DESC':
                this.sortItems(items);
                items.reverse();
                this.projectItems(items);
                break;
            default:
                this.projectItems(items);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ForDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.5", type: ForDirective, isStandalone: true, selector: "[abpFor]", inputs: { items: ["abpForOf", "items"], orderBy: ["abpForOrderBy", "orderBy"], orderDir: ["abpForOrderDir", "orderDir"], filterBy: ["abpForFilterBy", "filterBy"], filterVal: ["abpForFilterVal", "filterVal"], trackBy: ["abpForTrackBy", "trackBy"], compareBy: ["abpForCompareBy", "compareBy"], emptyRef: ["abpForEmptyRef", "emptyRef"] }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ForDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[abpFor]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i0.IterableDiffers }], propDecorators: { items: [{
                type: Input,
                args: ['abpForOf']
            }], orderBy: [{
                type: Input,
                args: ['abpForOrderBy']
            }], orderDir: [{
                type: Input,
                args: ['abpForOrderDir']
            }], filterBy: [{
                type: Input,
                args: ['abpForFilterBy']
            }], filterVal: [{
                type: Input,
                args: ['abpForFilterVal']
            }], trackBy: [{
                type: Input,
                args: ['abpForTrackBy']
            }], compareBy: [{
                type: Input,
                args: ['abpForCompareBy']
            }], emptyRef: [{
                type: Input,
                args: ['abpForEmptyRef']
            }] } });
//# sourceMappingURL=data:application/json;base64,