import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Abstract service for Authentication.
 */
export class AuthService {
    warningMessage() {
        console.error('You should add @abp/ng-oauth packages or create your own auth packages.');
    }
    get oidc() {
        this.warningMessage();
        return false;
    }
    set oidc(value) {
        this.warningMessage();
    }
    init() {
        this.warningMessage();
        return Promise.resolve(undefined);
    }
    login(params) {
        this.warningMessage();
        return of(undefined);
    }
    logout(queryParams) {
        this.warningMessage();
        return of(undefined);
    }
    navigateToLogin(queryParams) { }
    get isInternalAuth() {
        throw new Error('not implemented');
    }
    get isAuthenticated() {
        this.warningMessage();
        return false;
    }
    loginUsingGrant(grantType, parameters, headers) {
        console.log({ grantType, parameters, headers });
        return Promise.reject(new Error('not implemented'));
    }
    getAccessTokenExpiration() {
        this.warningMessage();
        return 0;
    }
    getRefreshToken() {
        this.warningMessage();
        return '';
    }
    getAccessToken() {
        this.warningMessage();
        return '';
    }
    refreshToken() {
        this.warningMessage();
        return Promise.resolve(undefined);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: AuthService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: AuthService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL2Fic3RyYWN0cy9hdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUl0Qzs7R0FFRztBQUlILE1BQU0sT0FBTyxXQUFXO0lBQ2QsY0FBYztRQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLHlFQUF5RSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxJQUFJLElBQUksQ0FBQyxLQUFjO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFtQjtRQUN2QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFvQjtRQUN6QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUFvQixJQUFVLENBQUM7SUFFL0MsSUFBSSxjQUFjO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxlQUFlLENBQ2IsU0FBaUIsRUFDakIsVUFBa0IsRUFDbEIsT0FBcUI7UUFFckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCx3QkFBd0I7UUFDdEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDOzhHQW5FVSxXQUFXO2tIQUFYLFdBQVcsY0FGVixNQUFNOzsyRkFFUCxXQUFXO2tCQUh2QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IExvZ2luUGFyYW1zIH0gZnJvbSAnLi4vbW9kZWxzL2F1dGgnO1xyXG5pbXBvcnQgeyBBYnBBdXRoUmVzcG9uc2UgfSBmcm9tICcuL2F1dGgtcmVzcG9uc2UubW9kZWwnO1xyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IHNlcnZpY2UgZm9yIEF1dGhlbnRpY2F0aW9uLlxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEF1dGhTZXJ2aWNlIGltcGxlbWVudHMgSUF1dGhTZXJ2aWNlIHtcclxuICBwcml2YXRlIHdhcm5pbmdNZXNzYWdlKCkge1xyXG4gICAgY29uc29sZS5lcnJvcignWW91IHNob3VsZCBhZGQgQGFicC9uZy1vYXV0aCBwYWNrYWdlcyBvciBjcmVhdGUgeW91ciBvd24gYXV0aCBwYWNrYWdlcy4nKTtcclxuICB9XHJcblxyXG4gIGdldCBvaWRjKCk6IGJvb2xlYW4ge1xyXG4gICAgdGhpcy53YXJuaW5nTWVzc2FnZSgpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc2V0IG9pZGModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICB9XHJcblxyXG4gIGluaXQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIGxvZ2luKHBhcmFtczogTG9naW5QYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhpcy53YXJuaW5nTWVzc2FnZSgpO1xyXG4gICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICBsb2dvdXQocXVlcnlQYXJhbXM/OiBQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhpcy53YXJuaW5nTWVzc2FnZSgpO1xyXG4gICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVRvTG9naW4ocXVlcnlQYXJhbXM/OiBQYXJhbXMpOiB2b2lkIHsgfVxyXG5cclxuICBnZXQgaXNJbnRlcm5hbEF1dGgoKTogYm9vbGVhbiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzQXV0aGVudGljYXRlZCgpOiBib29sZWFuIHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGxvZ2luVXNpbmdHcmFudChcclxuICAgIGdyYW50VHlwZTogc3RyaW5nLFxyXG4gICAgcGFyYW1ldGVyczogb2JqZWN0LFxyXG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzLFxyXG4gICk6IFByb21pc2U8QWJwQXV0aFJlc3BvbnNlPiB7XHJcbiAgICBjb25zb2xlLmxvZyh7IGdyYW50VHlwZSwgcGFyYW1ldGVycywgaGVhZGVycyB9KTtcclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcclxuICB9XHJcblxyXG4gIGdldEFjY2Vzc1Rva2VuRXhwaXJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgdGhpcy53YXJuaW5nTWVzc2FnZSgpO1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBnZXRSZWZyZXNoVG9rZW4oKTogc3RyaW5nIHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiAnJztcclxuICB9XHJcblxyXG4gIGdldEFjY2Vzc1Rva2VuKCk6IHN0cmluZyB7XHJcbiAgICB0aGlzLndhcm5pbmdNZXNzYWdlKCk7XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG5cclxuICByZWZyZXNoVG9rZW4oKTogUHJvbWlzZTxBYnBBdXRoUmVzcG9uc2U+IHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUF1dGhTZXJ2aWNlIHtcclxuICBvaWRjOiBib29sZWFuO1xyXG5cclxuICBnZXQgaXNJbnRlcm5hbEF1dGgoKTogYm9vbGVhbjtcclxuXHJcbiAgZ2V0IGlzQXV0aGVudGljYXRlZCgpOiBib29sZWFuO1xyXG5cclxuICBpbml0KCk6IFByb21pc2U8YW55PjtcclxuXHJcbiAgbG9nb3V0KHF1ZXJ5UGFyYW1zPzogUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICBuYXZpZ2F0ZVRvTG9naW4ocXVlcnlQYXJhbXM/OiBQYXJhbXMpOiB2b2lkO1xyXG5cclxuICBsb2dpbihwYXJhbXM6IExvZ2luUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICBsb2dpblVzaW5nR3JhbnQoXHJcbiAgICBncmFudFR5cGU6IHN0cmluZyxcclxuICAgIHBhcmFtZXRlcnM6IG9iamVjdCxcclxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyxcclxuICApOiBQcm9taXNlPEFicEF1dGhSZXNwb25zZT47XHJcblxyXG4gIGdldEFjY2Vzc1Rva2VuRXhwaXJhdGlvbigpOiBudW1iZXI7XHJcblxyXG4gIGdldFJlZnJlc2hUb2tlbigpOiBzdHJpbmc7XHJcblxyXG4gIGdldEFjY2Vzc1Rva2VuKCk6IHN0cmluZztcclxuXHJcbiAgcmVmcmVzaFRva2VuKCk6IFByb21pc2U8QWJwQXV0aFJlc3BvbnNlPjtcclxufVxyXG4iXX0=