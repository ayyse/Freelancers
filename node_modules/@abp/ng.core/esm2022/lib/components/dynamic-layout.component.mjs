import { Component, inject, isDevMode, Optional, SkipSelf } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LocalizationService } from '../services/localization.service';
import { ReplaceableComponentsService } from '../services/replaceable-components.service';
import { RouterEvents } from '../services/router-events.service';
import { RoutesService } from '../services/routes.service';
import { SubscriptionService } from '../services/subscription.service';
import { findRoute, getRoutePath } from '../utils/route-utils';
import { DYNAMIC_LAYOUTS_TOKEN } from '../tokens/dynamic-layout.token';
import { EnvironmentService } from '../services';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class DynamicLayoutComponent {
    constructor(dynamicLayoutComponent) {
        this.layouts = inject(DYNAMIC_LAYOUTS_TOKEN);
        this.isLayoutVisible = true;
        this.router = inject(Router);
        this.route = inject(ActivatedRoute);
        this.routes = inject(RoutesService);
        this.localizationService = inject(LocalizationService);
        this.replaceableComponents = inject(ReplaceableComponentsService);
        this.subscription = inject(SubscriptionService);
        this.routerEvents = inject(RouterEvents);
        this.environment = inject(EnvironmentService);
        if (dynamicLayoutComponent) {
            if (isDevMode())
                console.warn('DynamicLayoutComponent must be used only in AppComponent.');
            return;
        }
        this.checkLayoutOnNavigationEnd();
        this.listenToLanguageChange();
    }
    ngOnInit() {
        if (this.layout) {
            return;
        }
        const { oAuthConfig } = this.environment.getEnvironment();
        if (oAuthConfig.responseType === 'code') {
            this.getLayout();
        }
    }
    checkLayoutOnNavigationEnd() {
        const navigationEnd$ = this.routerEvents.getNavigationEvents('End');
        this.subscription.addOne(navigationEnd$, () => this.getLayout());
    }
    getLayout() {
        let expectedLayout = this.getExtractedLayout();
        if (!expectedLayout)
            expectedLayout = "empty" /* eLayoutType.empty */;
        if (this.layoutKey === expectedLayout)
            return;
        const key = this.layouts.get(expectedLayout);
        if (key) {
            this.layout = this.getComponent(key)?.component;
            this.layoutKey = expectedLayout;
        }
        if (!this.layout) {
            this.showLayoutNotFoundError(expectedLayout);
        }
    }
    getExtractedLayout() {
        const routeData = this.route.snapshot.data || {};
        let expectedLayout = routeData['layout'];
        let node = findRoute(this.routes, getRoutePath(this.router));
        node = { parent: node };
        while (node.parent) {
            node = node.parent;
            if (node.layout) {
                expectedLayout = node.layout;
                break;
            }
        }
        return expectedLayout;
    }
    showLayoutNotFoundError(layoutName) {
        let message = `Layout ${layoutName} not found.`;
        if (layoutName === 'account') {
            message =
                'Account layout not found. Please check your configuration. If you are using LeptonX, please make sure you have added "AccountLayoutModule.forRoot()" to your app.module configuration.';
        }
        console.warn(message);
    }
    listenToLanguageChange() {
        this.subscription.addOne(this.localizationService.languageChange$, () => {
            this.isLayoutVisible = false;
            setTimeout(() => (this.isLayoutVisible = true), 0);
        });
    }
    getComponent(key) {
        return this.replaceableComponents.get(key);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: DynamicLayoutComponent, deps: [{ token: DynamicLayoutComponent, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.5", type: DynamicLayoutComponent, selector: "abp-dynamic-layout", providers: [SubscriptionService], ngImport: i0, template: `
    @if (isLayoutVisible) {
      <ng-container [ngComponentOutlet]="layout"></ng-container>
    }
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: DynamicLayoutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-dynamic-layout',
                    template: `
    @if (isLayoutVisible) {
      <ng-container [ngComponentOutlet]="layout"></ng-container>
    }
  `,
                    providers: [SubscriptionService],
                }]
        }], ctorParameters: () => [{ type: DynamicLayoutComponent, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }] });
//# sourceMappingURL=data:application/json;base64,