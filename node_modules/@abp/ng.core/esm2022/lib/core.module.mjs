import { CommonModule } from '@angular/common';
import { provideHttpClient, withInterceptorsFromDi, withXsrfConfiguration, } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { AbstractNgModelComponent } from './abstracts/ng-model.component';
import { DynamicLayoutComponent } from './components/dynamic-layout.component';
import { ReplaceableRouteContainerComponent } from './components/replaceable-route-container.component';
import { RouterOutletComponent } from './components/router-outlet.component';
import { AutofocusDirective } from './directives/autofocus.directive';
import { InputEventDebounceDirective } from './directives/debounce.directive';
import { ForDirective } from './directives/for.directive';
import { FormSubmitDirective } from './directives/form-submit.directive';
import { InitDirective } from './directives/init.directive';
import { PermissionDirective } from './directives/permission.directive';
import { ReplaceableTemplateDirective } from './directives/replaceable-template.directive';
import { StopPropagationDirective } from './directives/stop-propagation.directive';
import { LocalizationModule } from './localization.module';
import { LocalizationPipe } from './pipes/localization.pipe';
import { SortPipe } from './pipes/sort.pipe';
import { ToInjectorPipe } from './pipes/to-injector.pipe';
import './utils/date-extensions';
import { ShortDateTimePipe } from './pipes/short-date-time.pipe';
import { ShortTimePipe } from './pipes/short-time.pipe';
import { ShortDatePipe } from './pipes/short-date.pipe';
import { SafeHtmlPipe } from './pipes/safe-html.pipe';
import { provideAbpCoreChild, provideAbpCore, withOptions } from './providers';
import * as i0 from "@angular/core";
const standaloneDirectives = [
    AutofocusDirective,
    InputEventDebounceDirective,
    ForDirective,
    FormSubmitDirective,
    InitDirective,
    PermissionDirective,
    ReplaceableTemplateDirective,
    StopPropagationDirective,
];
/**
 * BaseCoreModule is the module that holds
 * all imports, declarations, exports, and entryComponents
 * but not the providers.
 * This module will be imported and exported by all others.
 */
export class BaseCoreModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: BaseCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.5", ngImport: i0, type: BaseCoreModule, declarations: [AbstractNgModelComponent,
            DynamicLayoutComponent,
            ReplaceableRouteContainerComponent,
            RouterOutletComponent,
            SortPipe,
            SafeHtmlPipe,
            ToInjectorPipe,
            ShortDateTimePipe,
            ShortTimePipe,
            ShortDatePipe], imports: [CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RouterModule,
            LocalizationModule, AutofocusDirective,
            InputEventDebounceDirective,
            ForDirective,
            FormSubmitDirective,
            InitDirective,
            PermissionDirective,
            ReplaceableTemplateDirective,
            StopPropagationDirective], exports: [CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RouterModule,
            LocalizationModule,
            AbstractNgModelComponent,
            DynamicLayoutComponent,
            ReplaceableRouteContainerComponent,
            RouterOutletComponent,
            SortPipe,
            SafeHtmlPipe,
            ToInjectorPipe,
            ShortDateTimePipe,
            ShortTimePipe,
            ShortDatePipe, AutofocusDirective,
            InputEventDebounceDirective,
            ForDirective,
            FormSubmitDirective,
            InitDirective,
            PermissionDirective,
            ReplaceableTemplateDirective,
            StopPropagationDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: BaseCoreModule, providers: [LocalizationPipe, provideHttpClient(withInterceptorsFromDi())], imports: [CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RouterModule,
            LocalizationModule, CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RouterModule,
            LocalizationModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: BaseCoreModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        RouterModule,
                        LocalizationModule,
                        AbstractNgModelComponent,
                        DynamicLayoutComponent,
                        ReplaceableRouteContainerComponent,
                        RouterOutletComponent,
                        SortPipe,
                        SafeHtmlPipe,
                        ToInjectorPipe,
                        ShortDateTimePipe,
                        ShortTimePipe,
                        ShortDatePipe,
                        ...standaloneDirectives,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        RouterModule,
                        LocalizationModule,
                        ...standaloneDirectives,
                    ],
                    declarations: [
                        AbstractNgModelComponent,
                        DynamicLayoutComponent,
                        ReplaceableRouteContainerComponent,
                        RouterOutletComponent,
                        SortPipe,
                        SafeHtmlPipe,
                        ToInjectorPipe,
                        ShortDateTimePipe,
                        ShortTimePipe,
                        ShortDatePipe,
                    ],
                    providers: [LocalizationPipe, provideHttpClient(withInterceptorsFromDi())],
                }]
        }] });
/**
 * RootCoreModule is the module that will be used at root level
 * and it introduces imports useful at root level (e.g. NGXS)
 */
export class RootCoreModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: RootCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.5", ngImport: i0, type: RootCoreModule, imports: [BaseCoreModule, LocalizationModule], exports: [BaseCoreModule, LocalizationModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: RootCoreModule, providers: [
            provideHttpClient(withXsrfConfiguration({
                cookieName: 'XSRF-TOKEN',
                headerName: 'RequestVerificationToken',
            })),
        ], imports: [BaseCoreModule, LocalizationModule, BaseCoreModule, LocalizationModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: RootCoreModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BaseCoreModule, LocalizationModule],
                    imports: [BaseCoreModule, LocalizationModule],
                    providers: [
                        provideHttpClient(withXsrfConfiguration({
                            cookieName: 'XSRF-TOKEN',
                            headerName: 'RequestVerificationToken',
                        })),
                    ],
                }]
        }] });
/**
 * CoreModule is the module that is publicly available
 */
export class CoreModule {
    /**
     * @deprecated forRoot method is deprecated, use `provideAbpCore` *function* for config settings.
     */
    static forRoot(options = {}) {
        return {
            ngModule: RootCoreModule,
            providers: [provideAbpCore(withOptions(options))],
        };
    }
    /**
     * @deprecated forChild method is deprecated, use `provideAbpCoreChild` *function* for config settings.
     */
    static forChild(options = {}) {
        return {
            ngModule: RootCoreModule,
            providers: [provideAbpCoreChild(options)],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: CoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.5", ngImport: i0, type: CoreModule, imports: [BaseCoreModule], exports: [BaseCoreModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: CoreModule, imports: [BaseCoreModule, BaseCoreModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: CoreModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BaseCoreModule],
                    imports: [BaseCoreModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,