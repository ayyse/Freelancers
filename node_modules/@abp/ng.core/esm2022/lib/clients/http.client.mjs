import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { IS_EXTERNAL_REQUEST } from '../tokens/http-context.token';
import * as i0 from "@angular/core";
// source : https://github.com/armanozak/demo-angular-server-specific-interceptors
export class ExternalHttpClient extends HttpClient {
    request(first, url, options = {}) {
        if (typeof first === 'string') {
            this.#setPlaceholderContext(options);
            return super.request(first, url || '', options);
        }
        this.#setPlaceholderContext(first);
        return super.request(first);
    }
    #setPlaceholderContext(optionsOrRequest) {
        optionsOrRequest.context ??= new HttpContext();
        optionsOrRequest.context.set(IS_EXTERNAL_REQUEST, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ExternalHttpClient, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ExternalHttpClient, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.5", ngImport: i0, type: ExternalHttpClient, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvY2xpZW50cy9odHRwLmNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRW5FLGtGQUFrRjtBQUlsRixNQUFNLE9BQU8sa0JBQW1CLFNBQVEsVUFBVTtJQUN2QyxPQUFPLENBQ2QsS0FBZ0MsRUFDaEMsR0FBWSxFQUNaLFVBQTBCLEVBQUU7UUFFNUIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDRCxzQkFBc0IsQ0FBQyxnQkFBMkM7UUFDaEUsZ0JBQWdCLENBQUMsT0FBTyxLQUFLLElBQUksV0FBVyxFQUFFLENBQUM7UUFDL0MsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDOzhHQWpCVSxrQkFBa0I7a0hBQWxCLGtCQUFrQixjQUZqQixNQUFNOzsyRkFFUCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVNfRVhURVJOQUxfUkVRVUVTVCB9IGZyb20gJy4uL3Rva2Vucy9odHRwLWNvbnRleHQudG9rZW4nO1xyXG5cclxuLy8gc291cmNlIDogaHR0cHM6Ly9naXRodWIuY29tL2FybWFub3phay9kZW1vLWFuZ3VsYXItc2VydmVyLXNwZWNpZmljLWludGVyY2VwdG9yc1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXh0ZXJuYWxIdHRwQ2xpZW50IGV4dGVuZHMgSHR0cENsaWVudCB7XHJcbiAgb3ZlcnJpZGUgcmVxdWVzdChcclxuICAgIGZpcnN0OiBzdHJpbmcgfCBIdHRwUmVxdWVzdDxhbnk+LFxyXG4gICAgdXJsPzogc3RyaW5nLFxyXG4gICAgb3B0aW9uczogUmVxdWVzdE9wdGlvbnMgPSB7fSxcclxuICApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGhpcy4jc2V0UGxhY2Vob2xkZXJDb250ZXh0KG9wdGlvbnMpO1xyXG4gICAgICByZXR1cm4gc3VwZXIucmVxdWVzdChmaXJzdCwgdXJsIHx8ICcnLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiNzZXRQbGFjZWhvbGRlckNvbnRleHQoZmlyc3QpO1xyXG4gICAgcmV0dXJuIHN1cGVyLnJlcXVlc3QoZmlyc3QpO1xyXG4gIH1cclxuICAjc2V0UGxhY2Vob2xkZXJDb250ZXh0KG9wdGlvbnNPclJlcXVlc3Q6IHsgY29udGV4dD86IEh0dHBDb250ZXh0IH0pIHtcclxuICAgIG9wdGlvbnNPclJlcXVlc3QuY29udGV4dCA/Pz0gbmV3IEh0dHBDb250ZXh0KCk7XHJcbiAgICBvcHRpb25zT3JSZXF1ZXN0LmNvbnRleHQuc2V0KElTX0VYVEVSTkFMX1JFUVVFU1QsIHRydWUpO1xyXG4gIH1cclxufVxyXG5cclxudHlwZSBSZXF1ZXN0T3B0aW9ucyA9IFBhcmFtZXRlcnM8SHR0cENsaWVudFsncmVxdWVzdCddPlsyXTtcclxuIl19