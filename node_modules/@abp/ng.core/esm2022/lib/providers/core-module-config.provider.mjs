import { makeEnvironmentProviders, APP_INITIALIZER, Injector } from '@angular/core';
import { TitleStrategy } from '@angular/router';
import { provideHttpClient, withInterceptorsFromDi, withXsrfConfiguration, } from '@angular/common/http';
import { CORE_OPTIONS, LOCALIZATIONS, DYNAMIC_LAYOUTS_TOKEN, OTHERS_GROUP, QUEUE_MANAGER, SORT_COMPARE_FUNC, TENANT_KEY, compareFuncFactory, coreOptionsFactory, localizationContributor, } from '../tokens';
import { RoutesHandler } from '../handlers';
import { AuthErrorFilterService } from '../abstracts';
import { DEFAULT_DYNAMIC_LAYOUTS } from '../constants';
import { LocalizationService, LocalStorageListenerService, AbpTitleStrategy } from '../services';
import { DefaultQueueManager, getInitialData, localeInitializer, noop } from '../utils';
import { CookieLanguageProvider, IncludeLocalizationResourcesProvider, LocaleProvider } from './';
export var CoreFeatureKind;
(function (CoreFeatureKind) {
    CoreFeatureKind[CoreFeatureKind["Options"] = 0] = "Options";
    CoreFeatureKind[CoreFeatureKind["CompareFunctionFactory"] = 1] = "CompareFunctionFactory";
    CoreFeatureKind[CoreFeatureKind["TitleStrategy"] = 2] = "TitleStrategy";
})(CoreFeatureKind || (CoreFeatureKind = {}));
function makeCoreFeature(kind, providers) {
    return {
        ɵkind: kind,
        ɵproviders: providers,
    };
}
export function withOptions(options = {}) {
    return makeCoreFeature(CoreFeatureKind.Options, [
        {
            provide: 'CORE_OPTIONS',
            useValue: options,
        },
        {
            provide: CORE_OPTIONS,
            useFactory: coreOptionsFactory,
            deps: ['CORE_OPTIONS'],
        },
        { provide: TENANT_KEY, useValue: options.tenantKey || '__tenant' },
        {
            provide: LOCALIZATIONS,
            multi: true,
            useValue: localizationContributor(options.localizations),
            deps: [LocalizationService],
        },
        {
            provide: OTHERS_GROUP,
            useValue: options.othersGroup || 'AbpUi::OthersGroup',
        },
        {
            provide: DYNAMIC_LAYOUTS_TOKEN,
            useValue: options.dynamicLayouts || DEFAULT_DYNAMIC_LAYOUTS,
        },
    ]);
}
export function withTitleStrategy(strategy) {
    return makeCoreFeature(CoreFeatureKind.TitleStrategy, [
        {
            provide: TitleStrategy,
            useExisting: strategy,
        },
    ]);
}
export function withCompareFuncFactory(factory) {
    return makeCoreFeature(CoreFeatureKind.CompareFunctionFactory, [
        {
            provide: SORT_COMPARE_FUNC,
            useFactory: factory,
        },
    ]);
}
export function provideAbpCore(...features) {
    const providers = [
        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({
            cookieName: 'XSRF-TOKEN',
            headerName: 'RequestVerificationToken',
        })),
        LocaleProvider,
        CookieLanguageProvider,
        {
            provide: APP_INITIALIZER,
            multi: true,
            deps: [Injector],
            useFactory: getInitialData,
        },
        {
            provide: APP_INITIALIZER,
            multi: true,
            deps: [Injector],
            useFactory: localeInitializer,
        },
        {
            provide: APP_INITIALIZER,
            multi: true,
            deps: [LocalizationService],
            useFactory: noop,
        },
        {
            provide: APP_INITIALIZER,
            multi: true,
            deps: [LocalStorageListenerService],
            useFactory: noop,
        },
        {
            provide: APP_INITIALIZER,
            multi: true,
            deps: [RoutesHandler],
            useFactory: noop,
        },
        {
            provide: SORT_COMPARE_FUNC,
            useFactory: compareFuncFactory,
        },
        {
            provide: QUEUE_MANAGER,
            useClass: DefaultQueueManager,
        },
        AuthErrorFilterService,
        IncludeLocalizationResourcesProvider,
        {
            provide: TitleStrategy,
            useExisting: AbpTitleStrategy,
        },
    ];
    for (const feature of features) {
        providers.push(...feature.ɵproviders);
    }
    return makeEnvironmentProviders(providers);
}
export function provideAbpCoreChild(options = {}) {
    return makeEnvironmentProviders([
        {
            provide: LOCALIZATIONS,
            multi: true,
            useValue: localizationContributor(options.localizations),
            deps: [LocalizationService],
        },
    ]);
}
//# sourceMappingURL=data:application/json;base64,